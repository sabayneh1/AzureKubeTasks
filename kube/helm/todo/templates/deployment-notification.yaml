const azure = require('azure-storage');

module.exports = async function (context, req) {
    const tableSvc = azure.createTableService(process.env.AzureWebJobsStorage);
    const tableName = "UserActivity";

    tableSvc.createTableIfNotExists(tableName, function(error, result, response) {
        if (!error) {
            const task = {
                PartitionKey: {'_': req.body.user},
                RowKey: {'_': new Date().toISOString()},
                Email: {'_': req.body.email},
                Message: {'_': req.body.message},
                Timestamp: {'_': new Date()}
            };

            tableSvc.insertEntity(tableName, task, function (error, result, response) {
                if (!error) {
                    context.res = {
                        status: 200,
                        body: "User activity logged successfully"
                    };
                } else {
                    context.res = {
                        status: 500,
                        body: "Error logging user activity"
                    };
                }
                context.done();
            });
        } else {
            context.res = {
                status: 500,
                body: "Error creating table"
            };
            context.done();
        }
    });
};





# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: notification-service
#   labels:
#     app: notification-service
# spec:
#   replicas: {{ .Values.replicaCount }}
#   selector:
#     matchLabels:
#       app: notification-service
#   template:
#     metadata:
#       labels:
#         app: notification-service
#     spec:
#       containers:
#         - name: notification-service
#           image: "{{ .Values.image.repository }}/notification-service:{{ .Values.image.tagNotificationService }}"
#           ports:
#             - containerPort: 3004
#           env:
#             - name: TODO_SERVICE_MONGO_URI
#               value: "{{ .Values.env.TODO_SERVICE_MONGO_URI }}"
#             - name: USER_SERVICE_MONGO_URI
#               value: "{{ .Values.env.USER_SERVICE_MONGO_URI }}"
#             - name: EMAIL_USER
#               value: "{{ .Values.env.EMAIL_USER }}"
#             - name: EMAIL_PASS
#               value: "{{ .Values.env.EMAIL_PASS }}"
#             - name: EMAIL_HOST
#               value: "{{ .Values.env.EMAIL_HOST }}"
#             - name: EMAIL_PORT
#               value: "{{ .Values.env.EMAIL_PORT }}"
#             - name: JWT_SECRET
#               value: "{{ .Values.env.JWT_SECRET }}"
#           resources:
#             requests:
#               memory: {{ .Values.resources.requests.memory }}
#               cpu: {{ .Values.resources.requests.cpu }}
#             limits:
#               memory: {{ .Values.resources.limits.memory }}
#               cpu: {{ .Values.resources.limits.cpu }}
#           livenessProbe:
#             httpGet:
#               path: /health
#               port: 3004
#             initialDelaySeconds: 30
#             periodSeconds: 30
#           readinessProbe:
#             httpGet:
#               path: /health
#               port: 3004
#             initialDelaySeconds: 30
#             periodSeconds: 30
